'''Há duas maneiras usuais de se expressar a eficiência do uso de combustíveis em carros no Brasil: (1) em km/L (quilômetro por litro); e (2) L/100 km (litros para cada 100 quilômetro).

Faça um programa em Python 3 que leia da entrada padrão uma linha com um valor real, n, que representa o número de km/L e imprima o valor convertido em L/100 km na saída padrão, com duas casas decimais.

For example:

Input	Result
10.00
10.00
5.00
20.00
12.00
8.33
5.10
19.61
'''
"""
exer06
  >>> Faça um programa em Python 3 que leia uma linha contendo um texto (string) da entrada padrão e imprima o texto com todos os seus caracteres em minúsculo.
Dica:
Uma maneira de fazer a leitura é:
texto = input()
A função s.lower() retorna a string, s, em minúsculo.

"""

'''
Faça um programa em Python 3 que leia uma linha contendo um número inteiro de 4 dígitos e calcule a soma dos dígitos. Por exemplo para o número 1234 o resultado é 1 + 2 + 3 + 4 = 10
Dica:
Não converta todo o número como um único inteiro, ao invés acesse cada dígito separadamente e então coverta cada dígitos em inteiro.
valor = input()
digito0 = int(valor[0])
digito1 = int(valor[1])

'''

'''
Faça um programa em Python3 que leia da entrada padrão o nomes de meses, um em cada linha, e para cada mês imprima uma linha com o valor numérico daquele mês (inteiro). Use o dicionário definido abaixo, a entrada termina com uma linha com a palavra 'fim'. O nome do mês pode conter caracteres maiúsculos e minúsculos (use lower).
meses = {
    'janeiro': 1,
    'fevereiro': 2,
    'março': 3,
    'abril': 4,
    'maio': 5,
    'junho': 6,
    'julho': 7,
    'agosto': 8,
    'setembro': 9,
    'outubro': 10,
    'novembro': 11,
    'dezembro': 12,
}
For example:
Input	Result
setembro
SETEMBRO
Agosto
fim
9
9
8
Setembro
fim
9
ABRIL
MAIO
maio
fim
4
5
5
fim


'''

"""
Escreva uma função em Python 3 com o seguinte protótipo:
quadrado(x)
Sua função deve retornar o quadrado do número x. O código que usa esta função é automaticamente atrelado pelo corretor.
Uma resposta para esta questão é
def quadrado(x):
    return x*x
For example:
Test	Input	Result
value = int(input())
print(quadrado(value))
2
4
value = int(input())
print(quadrado(value))
3
9
"""

"""
Escreva uma função em Python 3 com o seguinte protótipo:
maior(a, b)
Sua função deve retornar o maior valor entre a e b. Sua função deve retornar o valor mesmo quando a for igual a b.
For example:
Test	Input	Result
a, b = map(int, input().split())
print(maior(a, b))
2 3
3
a, b = map(int, input().split())
print(maior(a, b))
7 2
7

"""

"""
Faça uma função chamada dias que retorne o número de dias que um dado mês, passado por argumento, contém. O mês é indicado por um número entre 1 e 12, sendo 1 o mês de janeiro. 
A sua função deve também receber um argumento opcional chamado bissexto de valor padrão False. 
Quando o valor do argumento bissexto é True considere fevereiro com 29 dias, senão 28.
For example:
Test	                  Result
print(dias(1))           31
print(dias(2))           28
print(dias(2, True))     29
print(dias(3))           31
print(dias(2, bissexto=True))29
print(dias(2, bissexto=False))28
"""

'''
Implemente as classes, Veiculo e Carro conforme diagrama abaixo em Python.
Especificação:
Os nomes devem ser precisamente como estabelecidos;
Classe Veiculo:
Deve ter dois atributos: nome (string), com padrão "" e valor (int), com padrão 0
Deve ter três métodos: o de inicialização (__init__), __str__ e get_valor:
__init__: Além do argumento self deve receber os argumentos nome e valor nesta ordem e iniciar os atributos com os respectivos nomes;
__str__: Recebe apenas o argumento self, simplesmente retorna o atributo nome;
get_valor: Recebe apenas o argumento self, simplesmente retorna o atributo valor;
Classe Carro:
Deve herdar da classe Veiculo (i.e. é sub classe de Veiculo)
Deve ter um atributo: portas (int)
Deve respeitar os atributos padrões da classe Veiculo
Deve ter dois métodos o de inicialização (__init__) e get_portas:
__init__: Além do argumento self deve receber os argumentos portas, nome e valor nesta ordem e iniciar os atributos com os respectivos nomes. 
Use super() para chamar o __init__ da super classe (Veiculo) para iniciar os atributos nome e valor;
get_portas: Recebe apenas o argumento self, simplesmente retorna o atributo portas;
Os casos de teste testarão tanto quanto ao uso das classes quanto a correta implementação das especificações acima.
Dica: Estude os casos de teste de exemplo.
For example:

Test	                                                 Result
v1 = Veiculo("Corsa", 32000)
print(v1)                                                Corsa
print(v1.get_valor())                                    32000

v2 = Veiculo("Corsa 2")
print(v2)                                                Corsa 2
print(v2.get_valor())                                       0

c1 = Carro(5, "Ka", 30000)                                 Ka
print(c1)                                                 30000
print(c1.get_valor())                                      5
print(c1.get_portas())

c2 = Carro(4, "Ka")                                        Ka
print(c2)                                                  0
print(c2.get_valor())                                      4
print(c2.get_portas())

print("get_valor" in Veiculo.__dict__)                    True
print("get_valor" in Carro.__dict__)                      False
print("__str__" in Veiculo.__dict__)                      True
print("__str__" in Carro.__dict__)                        False
print("get_portas" in Veiculo.__dict__)                   False
print("get_portas" in Carro.__dict__)                     True

'''